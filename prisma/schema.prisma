// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users    User[]
  invoices Invoice[]

  @@map("tenants")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  password     String   // store hashed password
  firstName    String   @map("first_name")
  lastName     String   @map("last_name")
  tenantId     String   @map("tenant_id")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  invoices Invoice[]

  @@index([tenantId])
  @@index([email])
  @@map("users")
}

model Invoice {
  id            String   @id @default(cuid())
  number        String   @unique @map("invoice_number")
  client        String   @map("client_name")
  clientEmail   String   @map("client_email")
  clientAddress String?  @map("client_address")
  issueDate     DateTime @map("issue_date")
  dueDate       DateTime @map("due_date")
  subtotal      Decimal  @db.Decimal(10, 2)
  tax           Decimal  @db.Decimal(10, 2)
  total         Decimal  @db.Decimal(10, 2)
  notes         String?  @db.Text
  status        String   @default("draft")
  tenantId      String   @map("tenant_id")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  tenant Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  items  InvoiceItem[]

  @@index([tenantId])
  @@index([number])
  @@index([status])
  @@map("invoices")
}

model InvoiceItem {
  id        String  @id @default(cuid())
  invoiceId String  @map("invoice_id")
  description String
  quantity  Int
  unitPrice Decimal @map("unit_price") @db.Decimal(10, 2)
  amount    Decimal @db.Decimal(10, 2)

  invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
  @@map("invoice_items")
}
// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Tenant {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users    User[]
  invoices Invoice[]

  @@map("tenants")
}

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String   @map("password_hash")
  firstName    String   @map("first_name")
  lastName     String   @map("last_name")
  tenantId     String   @map("tenant_id")
  createdAt    DateTime @default(now())
  // prisma/schema.prisma

  generator client {
    provider = "prisma-client-js"
  }

  datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
  }

  model Tenant {
    id        String   @id @default(cuid())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    users    User[]
    invoices Invoice[]

    @@map("tenants")
  }

  model User {
    id           String   @id @default(cuid())
    email        String   @unique
    passwordHash String   @map("password_hash")
    firstName    String   @map("first_name")
    lastName     String   @map("last_name")
    tenantId     String   @map("tenant_id")
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

    @@index([tenantId])
    @@index([email])
    @@map("users")
  }

  model Invoice {
    id              String   @id @default(cuid())
    invoiceNumber   String   @unique @map("invoice_number")
    clientName      String   @map("client_name")
    clientEmail     String   @map("client_email")
    clientAddress   String?  @map("client_address")
    issueDate       DateTime @map("issue_date")
    dueDate         DateTime @map("due_date")
    subtotal        Decimal  @db.Decimal(10, 2)
    tax             Decimal  @db.Decimal(10, 2)
    total           Decimal  @db.Decimal(10, 2)
    notes           String?  @db.Text
    status          String   @default("draft") // draft, sent, paid, overdue
    tenantId        String   @map("tenant_id")
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    tenant Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)
    items  InvoiceItem[]

    @@index([tenantId])
    @@index([invoiceNumber])
    @@index([status])
    @@map("invoices")
  }

  model InvoiceItem {
    id          String  @id @default(cuid())
    invoiceId   String  @map("invoice_id")
    description String
    quantity    Int
    unitPrice   Decimal @map("unit_price") @db.Decimal(10, 2)
    amount      Decimal @db.Decimal(10, 2)

    invoice Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

    @@index([invoiceId])
    @@map("invoice_items")
  }